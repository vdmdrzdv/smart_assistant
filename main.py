from datetime import datetime, timedelta
import json
import os
import threading
import re
import time
import pandas as pd
import pytz
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


from Templates_1_tg import clean_filename, create_msg_file
from excel_handler import create_pivot_table, extract_data
from sales_analysis import get_trend
from email_sender import send_email

USERS_FILE = 'users_data.json'
TIMEZONE = pytz.timezone('Asia/Yekaterinburg')
TOKEN = '7955516321:AAGKWegG3O70jPCVk_3cQrw5wcHrfA_27o4'
USER_STATES = {}
bot = telebot.TeleBot(TOKEN)
running = True
excel_data = []


class UserState:
    WAITING_FOR_LAST_NAME = 1
    WAITING_FOR_FIRST_NAME = 2
    WAITING_FOR_MIDDLE_NAME = 3


def load_users_data():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}


def save_users_data(data):
    with open(USERS_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


def check_upcoming_events():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    now = datetime.now()
    some_weeks_later = now + timedelta(weeks=2)

    upcoming_events = excel_data[
        (excel_data['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∏)'] >= pd.to_datetime(now)) &
        (excel_data['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∏)'] <= pd.to_datetime(some_weeks_later))
    ]

    for _, event in upcoming_events.iterrows():
        try:
            if event['telegram_id'] is None:
                continue
            user_id = str(event['telegram_id'])

            date = event['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∏)'].strftime('%d.%m.%Y')
            order = event['–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞']
            counterparty = event['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']

            message = (
                f"‚è∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—Ä–æ–∫–∞–º –ø–æ—Å—Ç–∞–≤–∫–∏ {order} {counterparty} –Ω–∞ {now.day}.{now.month}.{now.year}!\n"
                f"{date} –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞.\n"
                f"–î–µ–±–µ—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç—å - {'–ù–µ—Ç' if event['–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏'] == 0 else '–î–∞'}.\n"
                f"–û–ø–ª–∞—Ç–∞ - {'–ù–µ—Ç' if event['–û–ø–ª–∞—á–µ–Ω–æ'] == 0 else '–î–∞'}.\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞."
            )
            if event['–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏'] > 0:
                message += "\n –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å."
            bot.send_message(user_id, message)

        except Exception as e:
            print(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def background_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è —Å–æ–±—ã—Ç–∏—è"""
    while running:
        try:
            print(f"[{datetime.now(TIMEZONE)}] –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è...")
            check_upcoming_events()
            time.sleep(60)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ: {e}")
            time.sleep(60)


def get_message(company, type, trend):
    keyboard = InlineKeyboardMarkup()
    msg = f'üë§ <b>–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç:</b> {company}\n' \
          f'üìã <b>–¢–∏–ø:</b> {type}\n'
    if trend == -1:
        msg += f'üìâ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –ü–∞–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∑–∞–∫—É–ø–æ–∫\n' \
               f'üõéÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —É—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã —Å–Ω–∏–∂–µ–Ω–∏—è –∏ –æ–±—Å—É–¥–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.'

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω company –≤ callback_data –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        keyboard.add(InlineKeyboardButton("–ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"create_volume_down|{company}"))
        keyboard.add(InlineKeyboardButton("–í—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data=f"excel_down|{company}"))
    elif trend == 0:
        msg += f'üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –û–±—ä–µ–º –∑–∞–∫—É–ø–æ–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π\n' \
               f'üõéÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–∏–∑–Ω–∞–∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.'
    elif trend == 1:
        msg += f'üìà <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –†–æ—Å—Ç –æ–±—ä–µ–º–∞ –∑–∞–∫—É–ø–æ–∫\n' \
               f'üõéÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –û—Ç–º–µ—Ç—å—Ç–µ —Ä–æ—Å—Ç –æ–±—ä—ë–º–æ–≤ –∏ –æ–±—Å—É–¥–∏—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω company –≤ callback_data –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        keyboard.add(InlineKeyboardButton("–ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"create_volume_up|{company}"))
        keyboard.add(InlineKeyboardButton("–í—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data=f"excel_up|{company}"))
    elif trend == -2:
        msg += f'‚è∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –ï—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞\n' \
               f'üõéÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–ø–ª–∞—Ç—ã.'

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω company –≤ callback_data –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        keyboard.add(InlineKeyboardButton("–ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"create_unpaid|{company}"))
        keyboard.add(InlineKeyboardButton("–í—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data=f"excel_not_sale|{company}"))
    keyboard.add(InlineKeyboardButton("–û–±—Ä–∞–±–æ—Ç–∞–Ω", callback_data=f"skip|{company}"))
    return msg, keyboard


def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"),
        KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
        KeyboardButton("üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏")
    )
    return keyboard


def get_not_sale(not_sale_df):
    now = datetime.now()
    some_weeks_later = now + timedelta(weeks=1)

    upcoming_events = not_sale_df[
        (not_sale_df['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∏)'] >= pd.to_datetime(now)) &
        (not_sale_df['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∏)'] <= pd.to_datetime(some_weeks_later))
    ]
    if len(upcoming_events.index) > 0:
        return True
    else:
        return False


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = str(message.from_user.id)
    users_data = load_users_data()

    if user_id in users_data:
        bot.send_message(
            message.chat.id,
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {users_data[user_id]['last_name']} "
            f"{users_data[user_id]['first_name']} "
            f"{users_data[user_id].get('middle_name', '')}!",
            reply_markup=get_main_keyboard()
        )
    else:
        USER_STATES[user_id] = {'state': UserState.WAITING_FOR_LAST_NAME}
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
        )


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
        /summary - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
        /debt - —É–∑–Ω–∞—Ç—å –î–ó –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
    """
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['summary'])
def send_summary(message):
    pivot = create_pivot_table(excel_data)
    df = add_telegram_id_to_df(pivot)
    df = df[df['telegram_id'] == str(message.from_user.id)]
    df = get_trend(df)
    for _, row in df.iterrows():
        company_df = excel_data[excel_data['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'] == row['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']]
        type_company = company_df['–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'].iloc[0]
        not_sale_df = company_df[company_df['–û–ø–ª–∞—á–µ–Ω–æ'] == 0]
        if get_not_sale(not_sale_df):
            msg, keyboard = get_message(row['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'], type_company, -2)
            bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=keyboard)
            send_email("dlyashkolisusu@gmail.com", "–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", msg)
        elif isinstance(row['–¢—Ä–µ–Ω–¥'], int):
            msg, keyboard = get_message(row['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'], type_company, row['–¢—Ä–µ–Ω–¥'])
            bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=keyboard)
            send_email("dlyashkolisusu@gmail.com", "–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", msg)


@bot.message_handler(commands=['debt'])
def send_debt(message):
    user_id = str(message.from_user.id)
    df = excel_data.copy()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ Telegram ID
    df = df[df['telegram_id'] == user_id]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –î–ó > 0
    debtors = df[df['–î–ó'] > 0]

    if debtors.empty:
        bot.send_message(message.chat.id, "‚úÖ –£ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É –∏ –≤—ã–≤–æ–¥–∏–º —Å—É–º–º—ã –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π
    grouped = (
        debtors.groupby(['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'], as_index=False)['–î–ó']
        .sum()
    )

    for _, row in grouped.iterrows():
        msg = (
            f"üë§ <b>–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç:</b> {row['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']}\n"
            f"üìã <b>–¢–∏–ø:</b> {row['–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞']}\n"
            f"üí∞ <b>–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å:</b> {row['–î–ó']:.2f} —Ä—É–±.\n"
            f"üõéÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> C–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –æ–ø–ª–∞—Ç—ã."
        )
        bot.send_message(message.chat.id, msg, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    chat_id = call.message.chat.id

    try:
        bot.answer_callback_query(call.id)
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –∏–∑ callback_data –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        callback_parts = call.data.split('|')
        action = callback_parts[0]
        –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç = callback_parts[1] if len(callback_parts) > 1 else None

        if not –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω.")
            return

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è excel_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        company_df = excel_data[excel_data['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'] == –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç]
        if company_df.empty:
            bot.send_message(chat_id, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ {–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ excel_data –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ create_msg_file (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        row = company_df.iloc[0]
        –ú–µ–Ω–µ–¥–∂–µ—Ä = row['–ú–µ–Ω–µ–¥–∂–µ—Ä']
        –î–æ–≥–æ–≤–æ—Ä_–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ = row['–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞']
        –î–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏ = row['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∏)'].strftime(
            '%d.%m.%Y') if pd.notna(row['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∏)']) else ""
        –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ = "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Ññ Unknown"  # –ó–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ excel_data

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∏—Å–µ–º (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        temp_file_path = os.path.join(
            os.getcwd(), f"temp_data_{clean_filename(–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç)}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
        pivot_table = create_pivot_table(excel_data)
        company_pivot = pivot_table[pivot_table['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'] == –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç]
        company_pivot.to_excel(temp_file_path, index=False)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π callback
        if action == "create_msg":
            letter_type = "shipping"
        elif action == "create_unpaid":
            letter_type = "unpaid"
        elif action == "create_volume_down":
            letter_type = "volume_down"
        elif action == "create_volume_up":
            letter_type = "volume_up"
        elif action == "create_overdue":
            letter_type = "overdue"
        elif action == "skip":
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            return
        elif action == "excel_up":
            file_path = 'test_data_template.xlsx'
            try:
                with open(file_path, 'rb') as file:
                    bot.send_document(chat_id=call.message.chat.id, document=file)
            except Exception as e:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
            return
        elif action == "excel_down":
            file_path = 'test_data_template.xlsx'
            try:
                with open(file_path, 'rb') as file:
                    bot.send_document(chat_id=call.message.chat.id, document=file)
            except Exception as e:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
            return
        elif action == "excel_not_sale":
            file_path = 'test_data_template.xlsx'
            try:
                with open(file_path, 'rb') as file:
                    bot.send_document(chat_id=call.message.chat.id, document=file)
            except Exception as e:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
            return

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∏—Å—å–º–∞
        params = {
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç,
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": –ú–µ–Ω–µ–¥–∂–µ—Ä,
            "–î–æ–≥–æ–≤–æ—Ä_–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": –î–æ–≥–æ–≤–æ—Ä_–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞,
            "letter_type": letter_type,
            "excel_file_path": temp_file_path
        }
        if letter_type == "overdue":
            params["–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"] = –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            params["–î–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏"] = –î–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –í—ã–∑–æ–≤ create_msg_file —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ excel_data (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
        file_path = create_msg_file(**params)
        if file_path:
            try:
                with open(file_path, 'rb') as file:
                    bot.send_document(chat_id=chat_id, document=file,
                                      caption=f"{os.path.basename(file_path)}")
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–°–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –ù–∏–∫–æ–ª–∞–π –°–µ—Ä–≥–µ–µ–≤–∏—á)
                    os.remove(temp_file_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {str(e)}")
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    text = message.text.strip()

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
    if text == "üìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º":
        send_summary(message)
        return
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        send_help(message)
        return
    elif text == "üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏":
        send_debt(message)
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_id not in USER_STATES:
        return

    current_state = USER_STATES[user_id]['state']
    text = message.text.strip()

    if current_state == UserState.WAITING_FOR_LAST_NAME:
        USER_STATES[user_id]['last_name'] = text
        USER_STATES[user_id]['state'] = UserState.WAITING_FOR_FIRST_NAME
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

    elif current_state == UserState.WAITING_FOR_FIRST_NAME:
        USER_STATES[user_id]['first_name'] = text
        USER_STATES[user_id]['state'] = UserState.WAITING_FOR_MIDDLE_NAME
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'):"
        )

    elif current_state == UserState.WAITING_FOR_MIDDLE_NAME:
        middle_name = text if text != '-' else ''

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data = load_users_data()
        users_data[user_id] = {
            'last_name': USER_STATES[user_id]['last_name'],
            'first_name': USER_STATES[user_id]['first_name'],
            'middle_name': middle_name,
            'username': message.from_user.username,
            'registration_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        save_users_data(users_data)

        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del USER_STATES[user_id]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_name = f"{users_data[user_id]['last_name']} " \
                    f"{users_data[user_id]['first_name']}"
        if middle_name:
            full_name += f" {users_data[user_id]['middle_name']}"

        bot.send_message(
            message.chat.id,
            f"–°–ø–∞—Å–∏–±–æ, {full_name}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=get_main_keyboard()
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –§–ò–û –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Telegram ID
def add_telegram_id_to_df(df):
    users_data = load_users_data()
    fio_to_id = {}
    for user_id, user_info in users_data.items():
        last_name = user_info.get('last_name', '')
        first_name = user_info.get('first_name', '')
        middle_name = user_info.get('middle_name', '')
        fio = f"{last_name} {first_name} {middle_name}".strip()
        fio_to_id[fio] = user_id

    def find_telegram_id(fio):
        if fio in fio_to_id:
            return fio_to_id[fio]
        return None

    df['telegram_id'] = df['–ú–µ–Ω–µ–¥–∂–µ—Ä'].apply(find_telegram_id)
    return df


def main():
    try:
        if not os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'w', encoding='utf-8') as file:
                json.dump({}, file)

        df = extract_data('data.xlsx')
        global excel_data
        excel_data = add_telegram_id_to_df(df)
        bg_thread = threading.Thread(target=background_task)
        bg_thread.daemon = True
        bg_thread.start()
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.infinity_polling()
    except:
        time.sleep(5)
        main()


if __name__ == '__main__':
    main()
